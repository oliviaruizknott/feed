{"version":3,"sources":["app/instructionPosts.js","app/constants.js","app/posters.js","app/gameFunctions.js","features/posts/postsSlice.js","features/followers/followersSlice.js","Reactions.js","Post.js","FeedContainer.js","Avatar.js","Followers.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","index.js"],"names":["INSTRUCTION_POSTS","id","content","UP","DOWN","GOOD","BAD","BART","ACQUAINTANCE","FRIEND","displayName","multiplier","time","faker","require","generatePost","instructionId","posterId","post","posters","reactions","constants","instruction","good","Math","random","datatype","uuid","initialState","postsSlice","createSlice","name","reducers","addPost","state","action","push","payload","removePost","index","findIndex","splice","actions","selectPosts","posts","followersSlice","value","incrementFollowers","decrementFollowers","selectFollowers","followers","Reactions","props","order","setOrder","colors","setColors","reactionHandler","bind","s","audiochannels","Array","a","Audio","length","thistime","Date","getTime","document","getElementById","duration","src","load","play","e","elementId","target","closest","split","postId","thumb","this","console","log","map","i","icon","faThumbsUp","faThumbsDown","className","onClick","renderButtons","React","Component","connect","Post","useState","numberOfSentences","floor","textArray","lorem","sentences","randomIndex","colorClass","word","generateText","text","faUser","font","renderContent","FeedContainer","useSelector","Avatar","Followers","App","setInterval","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","followersReducer","postsReducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5058958f.chunk.js","sourcesContent":["export const INSTRUCTION_POSTS = {\n  \"I0\": {\n    id: \"I0\",\n    content: `Welcome to Feed! The very best social network for your growing\nyour social network! All you have to do is like and dislike everything correctly\nand quickly and you’ll get lots of followers. The more followers you get, the\nhappier you’ll be! Just like this post to get started.`,\n  },\n}\n","export const UP = \"up\";\nexport const DOWN = \"down\";\nexport const GOOD = \"good\";\nexport const BAD = \"bad\";\n","export const BART = \"bart\";\nexport const ACQUAINTANCE = \"acquaintance\";\nexport const FRIEND = \"friend\";\nexport const MOM = \"mom\";\n// export const BOSS = \"boss\";\n// export const EX = \"ex\";\n// export const CELEBRITY = \"celebrity\";\n\nexport const POSTERS = {\n  [BART]: {\n    id: BART,\n    displayName: \"Bart Suckerburg\",\n    multiplier: 10,\n    time: 10\n  },\n  [ACQUAINTANCE]: {\n    id: ACQUAINTANCE,\n    displayName: \"Acquaintance\",\n    multiplier: 1,\n    time: 10\n  },\n  [FRIEND]: {\n    id: FRIEND,\n    displayName: \"Friend\",\n    multiplier: 2,\n    time: 10\n  },\n  [MOM]: {\n    id: MOM,\n    displayName: \"Mom\",\n    multiplier: 3,\n    time: 10\n  }\n}\n","import { INSTRUCTION_POSTS } from \"./instructionPosts\";\nimport * as constants from \"./constants\";\nimport * as posters from \"./posters\";\n\nvar faker = require('faker');\n\nexport const generatePost = (instructionId=null, posterId=null, content=null) => {\n  // If an instructionId was passed, generate the associated instruction post.\n  if (instructionId) {\n    const post = INSTRUCTION_POSTS[instructionId];\n    post.posterId = posters.BART;\n    post.reactions = constants.UP;\n    post.time = null;\n    post.instruction = true;\n\n    return post;\n  }\n\n  // Otherwise, generate a post.\n  const good = Math.random() < 0.5;\n  return {\n\t\tid: faker.datatype.uuid(),\n\t\tposterId: posterId || \"friend\",\n\t\tcontent: good ? constants.GOOD : constants.BAD,\n\t\treactions: [constants.UP, constants.DOWN],\n\t\ttime: 10\n\t}\n}\n\nexport const generateText = (post) => {\n  if (post.instruction) {\n    return post.content;\n  }\n\n  const numberOfSentences = (Math.floor(Math.random()*3)) + 1;\n  const text = faker.lorem.sentences(numberOfSentences);\n  const textArray = text.split(\" \");\n  const randomIndex = [Math.floor(Math.random()*textArray.length)]\n  const colorClass = post.content === \"good\" ? \"text-green-500\" : \"text-red-500\";\n\n  return textArray.map((word, i) => {\n    if (i == randomIndex) {\n      return (\n        <span key={faker.datatype.uuid()} className={colorClass}>{word} </span>\n      )\n    } else {\n      return (\n        <span key={faker.datatype.uuid()}>{word} </span>\n      )\n    }\n  })\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport { generatePost } from \"../../app/gameFunctions\";\n\nconst initialState = [\n  generatePost(\"I0\"), // first instruction post\n  generatePost() // randomly generated post\n];\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost: (state, action) => {\n      state.push(action.payload);\n    },\n    removePost: (state, action) => {\n      const index = state.findIndex(post => post.id === action.payload);\n      if (index > -1) {\n        state.splice(index, 1);\n      }\n    },\n  },\n});\n\nexport const { addPost, removePost } = postsSlice.actions;\n\nexport const selectPosts = (state) => state.posts;\n\nexport default postsSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const followersSlice = createSlice({\n  name: 'followers',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    incrementFollowers: (state) => {\n      state.value += 1;\n    },\n    decrementFollowers: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { incrementFollowers, decrementFollowers } = followersSlice.actions;\n\nexport const selectFollowers = (state) => state.followers.value;\n\nexport default followersSlice.reducer;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons';\n\nimport { UP, DOWN, GOOD, BAD } from './app/constants';\nimport { decrementFollowers, incrementFollowers } from './features/followers/followersSlice';\nimport { removePost } from './features/posts/postsSlice';\n\nclass Reactions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      order: this.setOrder(),\n      colors: this.setColors()\n    }\n\n    this.reactionHandler = this.reactionHandler.bind(this);\n  }\n\n  setOrder() {\n    return Math.random() < 0.5 ? [UP, DOWN] : [DOWN, UP];\n  }\n\n  setColors() {\n    return Math.random() < 0.5\n      ? [\"text-green-500\", \"text-red-500\"]\n      : [\"text-red-500\", \"text-green-500\"];\n  }\n\n  play_multi_sound(s) {\n    let channel_max = 6;\t\t\t\t\t\t\t\t\t\t                          // number of channels\n    let audiochannels = new Array();\n    for (let a=0;a<channel_max;a++) {\t\t\t\t\t\t\t                \t\t// prepare the channels\n        audiochannels[a] = new Array();\n        audiochannels[a]['channel'] = new Audio();\t                 \t// create a new audio object\n        audiochannels[a]['finished'] = -1;\t\t\t\t\t\t                // expected end time for this channel\n    }\n    for (let a=0;a<audiochannels.length;a++) {\n        let thistime = new Date();\n        if (audiochannels[a]['finished'] < thistime.getTime()) {\t\t\t// is this channel finished?\n            audiochannels[a]['finished'] = thistime.getTime() + document.getElementById(s).duration*1000;\n            audiochannels[a]['channel'].src = document.getElementById(s).src;\n            audiochannels[a]['channel'].load();\n            audiochannels[a]['channel'].play();\n            break;\n        }\n    }\n  }\n\n\n  reactionHandler(e) {\n    // Ensure getting the button’s id, even if the user clicks something more\n    // specific\n    const elementId = e.target.closest(\".reaction-button\").id.split(\"_\");\n    const postId = elementId[0];\n    const thumb = elementId[1];\n\n    if (this.props.post.instruction && thumb === UP) {\n      console.log(\"CORRECT!\")\n      this.props.incrementFollowers();\n    } else if (\n      (thumb === UP && this.props.post.content === GOOD) ||\n      (thumb === DOWN && this.props.post.content === BAD)\n    ) {\n      console.log(\"CORRECT!\");\n      this.props.incrementFollowers();\n      // this.play_multi_sound('audiotag1');\n    } else {\n      console.log(\"WRONG!!\");\n      this.props.decrementFollowers();\n      // this.play_multi_sound('audiotag2');\n    }\n\n    this.props.removePost(postId);\n  }\n\n  renderButtons() {\n    return this.state.order.map((thumb, i) => {\n      const icon = thumb === UP ? faThumbsUp : faThumbsDown;\n\n      return (\n        <button key={thumb} id={`${this.props.post.id}_${thumb}`} className={`reaction-button p-4 ${this.state.colors[i]}`} onClick={this.reactionHandler}>\n          <FontAwesomeIcon icon={icon} />\n        </button>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"border-t-2 grid grid-cols-2 divide-x-2 divide-gray-200\">\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { decrementFollowers, incrementFollowers, removePost }\n)(Reactions);\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nimport { generateText } from './app/gameFunctions';\nimport Reactions from './Reactions';\n\nexport function Post(props) {\n  const post = props.post;\n  const [text] = useState(generateText(post));\n\n  const renderContent = () => {\n    const font = post.instruction ? \"font-sans\" : \"font-mockFlow\";\n    return (\n      <div className={`${font} mb-4`}>{text}</div>\n    )\n  }\n\n  return (\n    <div className=\"border-4 border-purple bg-white rounded-lg m-4\">\n      <div className=\"p-4\">\n        <div className=\"flex justify-between\">\n          <div className=\"flex mb-4 items-center\">\n            <div className=\"border border-avatar bg-avatar rounded-full p-1 h-8 w-8 mr-4 text-center text-white\">\n              <FontAwesomeIcon icon={faUser} />\n            </div>\n            <div>Name</div>\n          </div>\n          <div>Timer</div>\n        </div>\n        {renderContent()}\n      </div>\n      <Reactions post={post} />\n    </div>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport { selectPosts } from \"./features/posts/postsSlice\";\nimport Post from './Post';\n\nexport function FeedContainer() {\n  const posts = useSelector(selectPosts);\n\n  return (\n    <div className=\"mb-20\">\n      {posts.map(post => <Post key={post.id} post={post} />)}\n    </div>\n  );\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nfunction Avatar() {\n  return (\n    <div className=\"border border-avatar bg-avatar rounded-full p-1 h-8 w-8 mr-4 text-center text-white\">\n      <FontAwesomeIcon icon={faUser} />\n    </div>\n  );\n}\n\nexport default Avatar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectFollowers } from './features/followers/followersSlice';\nimport Avatar from './Avatar';\n\nexport function Followers() {\n  const followers = useSelector(selectFollowers);\n\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"border-4 border-b-0 border-white bottom-0 bg-purple fixed flex items-center mx-auto p-4 text-white rounded-lg rounded-b-none\">\n        <Avatar />\n        {`${followers} followers`}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\n\nimport { addPost } from './features/posts/postsSlice';\nimport { generatePost } from './app/gameFunctions';\nimport { FeedContainer } from './FeedContainer';\nimport { Followers } from './Followers';\n\nclass App extends React.Component {\n  componentDidMount() {\n    setInterval(() => {\n      this.props.addPost(generatePost());\n    }, 3000)\n  }\n\n  render() {\n    return (\n      <div className=\"max-w-screen-sm m-auto\">\n        <FeedContainer />\n        <Followers />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addPost }\n)(App);\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport followersReducer from '../features/followers/followersSlice';\nimport postsReducer from '../features/posts/postsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    followers: followersReducer,\n    posts: postsReducer\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}