{"version":3,"sources":["logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/followers/followersSlice.js","Reactions.js","Post.js","FeedContainer.js","Avatar.js","Followers.js","App.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","followersSlice","selectFollowers","followers","UP","DOWN","Reactions","props","order","setOrder","colors","setColors","reactionHandler","bind","Math","random","e","elementId","target","closest","id","split","postId","thumb","this","good","console","log","removePost","map","i","icon","faThumbsUp","faThumbsDown","className","onClick","renderButtons","React","Component","connect","faker","require","Post","text","generateText","numberOfSentences","floor","textArray","lorem","sentences","randomIndex","length","colorClass","word","datatype","uuid","faUser","renderContent","FeedContainer","posts","addPost","createPost","setInterval","post","setState","filter","renderPosts","Avatar","Followers","useSelector","App","store","configureStore","reducer","counter","counterReducer","followersReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9acb0c27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const followersSlice = createSlice({\n  name: 'followers',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = followersSlice.actions;\n\nexport const selectFollowers = (state) => state.followers.value;\n\nexport default followersSlice.reducer;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { decrement, increment } from './features/followers/followersSlice';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-regular-svg-icons'\n\nconst UP = \"up\";\nconst DOWN = \"down\";\n\nclass Reactions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      order: this.setOrder(),\n      colors: this.setColors()\n    }\n\n    this.reactionHandler = this.reactionHandler.bind(this);\n  }\n\n  setOrder() {\n    return Math.random() < 0.5 ? [UP, DOWN] : [DOWN, UP];\n  }\n\n  setColors() {\n    return Math.random() < 0.5\n      ? [\"text-green-500\", \"text-red-500\"]\n      : [\"text-red-500\", \"text-green-500\"];\n  }\n\n  reactionHandler(e) {\n    // If the player clicks the icon instead of the larger button, the id isn’t\n    // right; ensure getting the button’s id\n    const elementId = e.target.closest(\".reaction-button\").id.split(\"_\");\n    const postId = elementId[0];\n    const thumb = elementId[1];\n\n    if (\n      (thumb === UP && this.props.good) ||\n      (thumb === DOWN && !this.props.good)\n    ) {\n      console.log(\"CORRECT!\");\n      this.props.increment();\n    } else {\n      console.log(\"WRONG!!\");\n      this.props.decrement();\n    }\n\n    this.props.removePost(postId);\n  }\n\n  renderButtons() {\n    return this.state.order.map((thumb, i) => {\n      const icon = thumb === UP ? faThumbsUp : faThumbsDown;\n\n      return (\n        <button key={thumb} id={`${this.props.postId}_${thumb}`} className={`reaction-button p-4 ${this.state.colors[i]}`} onClick={this.reactionHandler}>\n          <FontAwesomeIcon icon={icon} />\n        </button>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"border-t-2 grid grid-cols-2 divide-x-2 divide-gray-200\">\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { decrement, increment }\n)(Reactions);\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nimport Reactions from './Reactions';\n\nvar faker = require('faker');\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: this.generateText(),\n    }\n  }\n\n  generateText() {\n    const numberOfSentences = (Math.floor(Math.random()*3)) + 1;\n    const text = faker.lorem.sentences(numberOfSentences);\n    const textArray = text.split(\" \");\n    const randomIndex = [Math.floor(Math.random()*textArray.length)]\n    const colorClass = this.props.good ? \"text-green-500\" : \"text-red-500\";\n\n    return textArray.map((word, i) => {\n      if (i == randomIndex) {\n        return (\n          <span key={faker.datatype.uuid()} className={colorClass}>{word} </span>\n        )\n      } else {\n        return (\n          <span key={faker.datatype.uuid()}>{word} </span>\n        )\n      }\n    })\n  }\n\n  renderContent() {\n    return (\n      <div className=\"font-mockFlow mb-4\">{this.state.text}</div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"border-4 border-purple bg-white rounded-lg m-4\">\n        <div className=\"p-4\">\n          <div className=\"flex justify-between\">\n            <div className=\"flex mb-4 items-center\">\n              <div className=\"border border-avatar bg-avatar rounded-full p-1 h-8 w-8 mr-4 text-center text-white\">\n                <FontAwesomeIcon icon={faUser} />\n              </div>\n              <div>Name</div>\n            </div>\n            <div>Timer</div>\n          </div>\n          {this.renderContent()}\n        </div>\n        <Reactions\n          postId={this.props.id}\n          good={this.props.good}\n          removePost={this.props.removePost}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\nvar faker = require('faker');\n\nclass FeedContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: []\n    }\n\n    this.removePost = this.removePost.bind(this);\n  }\n\n  // Add a new post every 3 seconds\n  componentDidMount() {\n    this.addPost(this.createPost());\n    setInterval(() => {\n      this.addPost(this.createPost());\n    }, 3000);\n  }\n\n  createPost() {\n    const good = Math.random() < 0.5;\n    return {\n      id: faker.datatype.uuid(),\n      good: good\n    }\n  }\n\n  addPost(post) {\n    const posts = [...this.state.posts, post]\n    this.setState({ posts });\n  }\n\n  removePost(postId) {\n    const posts = this.state.posts.filter((post) => {\n      return post.id !== postId;\n    })\n\n    this.setState({ posts });\n  }\n\n  renderPosts() {\n    return this.state.posts.map((post) => {\n      return <Post\n        key={post.id}\n        id={post.id}\n        good={post.good}\n        removePost={this.removePost}\n      />;\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"mb-20\">{this.renderPosts()}</div>\n    );\n  }\n}\n\nexport default FeedContainer;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\n\nfunction Avatar() {\n  return (\n    <div className=\"border border-avatar bg-avatar rounded-full p-1 h-8 w-8 mr-4 text-center text-white\">\n      <FontAwesomeIcon icon={faUser} />\n    </div>\n  );\n}\n\nexport default Avatar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectFollowers } from './features/followers/followersSlice';\nimport Avatar from './Avatar';\n\nvar faker = require('faker');\n\nexport function Followers() {\n  const followers = useSelector(selectFollowers);\n  \n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"border-4 border-b-0 border-white bottom-0 bg-purple fixed flex items-center mx-auto p-4 text-white rounded-lg rounded-b-none\">\n        <Avatar />\n        {`${followers} followers`}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport FeedContainer from './FeedContainer';\nimport { Followers } from './Followers';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"max-w-screen-sm m-auto\">\n        <FeedContainer />\n        <Followers />\n      </div>\n    );\n  }\n\n  // render() {\n  //   return (\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <Counter />\n  //       <p>\n  //         Edit <code>src/App.js</code> and save to reload.\n  //       </p>\n  //       <span>\n  //         <span>Learn </span>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://reactjs.org/\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           React\n  //         </a>\n  //         <span>, </span>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://redux.js.org/\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Redux\n  //         </a>\n  //         <span>, </span>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://redux-toolkit.js.org/\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Redux Toolkit\n  //         </a>\n  //         ,<span> and </span>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://react-redux.js.org/\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           React Redux\n  //         </a>\n  //       </span>\n  //     </header>\n  //   )\n  // }\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport followersReducer from '../features/followers/followersSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    followers: followersReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}